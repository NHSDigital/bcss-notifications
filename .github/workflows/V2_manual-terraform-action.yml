name: Manual Terraform Action
run-name: Terraform ${{ inputs.action }} in ${{ inputs.environment }} for Notify Communication Management

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "The environment to deploy to"
        required: true
        type: choice
        options:
          - preprod
          - prod
      action:
        description: "The Terraform action to perform"
        required: true
        type: choice
        options:
          - plan
          - refresh
          - apply
          - destroy


permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-2
  TF_BUCKET: bcss-${{ inputs.environment }}-terraform-state-store
  TF_KEY: communication-management/terraform.tfstate

jobs:
  terraform-action:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-runner-role

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ env.TF_BUCKET }}" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="key=${{ env.TF_KEY }}" \
            -backend-config="use_lockfile=true"
            
         
      - name: Terraform Action (${{ inputs.action }})
        run: |
          case "${{ inputs.action }}" in
            plan)
              terraform plan -var-file="./config/${{ inputs.environment }}.tfvars"
              ;;
            refresh)
              terraform apply -refresh-only -var-file="./config/${{ inputs.environment }}.tfvars"
              ;;
            apply)
              terraform apply -auto-approve -var-file="./config/${{ inputs.environment }}.tfvars"
              ;;
            destroy)
              terraform destroy -auto-approve -var-file="./config/${{ inputs.environment }}.tfvars"
              ;;
            *)
              echo "Invalid action specified. Use 'plan', 'apply', or 'destroy'."
              exit 1
              ;;
          esac
